<?xml version="1.0" encoding="utf-8"?>
<search>
  
    <entry>
      <title><![CDATA[GIL을 알아보자]]></title>
      <url>/python/2018/10/24/GIL/</url>
      <content type="text"><![CDATA[Global Interpreter Lock한  CPU만 일함.!다중 CPU 환경에서 동시에 여러 파이썬 코드를 병렬로 실행할 수 없음.  인터프리터의 구현이 쉬워짐  Garbage Collector 만들기 조음  C/C++ 확장 만들기 만들기 쉬움.프로그램에 I/O 작업을 많이하면 파이썬 쓰레드도 좋음.우리가 하는 일반 프로그래밍은 I/O Bound계산을 많이 하는 작업쓰레드 -&gt; 프로세스다중 CPU에서 병렬 실행을 위해서는 다중 프로세스를 이용하는 multiprocessing 모듈을 사용함.프로그램에 I/O 작업을 많이하면 파이썬 쓰레드도 좋음.우리가 하는 일반 프로그래밍은 I/O Bound계산을 많이 하는 작업쓰레드 -&gt; 프로세스다중 CPU에서 병렬 실행을 위해서는 다중 프로세스를 이용하는 multiprocessing 모듈을 사용함.th1 = Thread(target=do_work)th1.start()th1.join()pr1 = Process(target=do_work)pr1.start()pr1.join()Process운영체제가 작업하는 단위Thread이 Process 안에서 공유되는 메모리를 바탕으로여러 작업을 생성하는 작업 단위.-&gt; 각 thread마다 할단된 개인적인 메모리가 있으면서 thread가 속한 process가 가지는 메모리에도접근가능함.Race condition여러 thread가 공유된 데이터를 변경함으로써 발생하는 문제.“Thread-safe 하다”thread들이 race condition을 발생시키지 않으면서 각자의 일을 수행한다는 뜻.Mutex  Thread-safe한 코드를 만들기 위해서 사용하는 것 중 하나.  Race condition을 막기 위해 공유되는 메모리의 데이터를 여러 thread가 동시에 사용할 수 없도록 잠그는일을 맡음.휴대폰이 없던 시절에는 공중 전화를 주로 이용했었다. 거리의 모든 남자들은 각자의 아내에게 전화를 너무나 걸고 싶어한다.어떤 한 남자가 처음으로 공중 전화 부스에 들어가서 그의 사랑하는 아내에게 전화를 걸었다면, 그는 꼭 전화 부스의 문을 꼭 잡고 있어야 한다. 왜냐하면 사랑에 눈이 먼 다른 남자들이 전화를 걸기 위해 시도때도 없이 달려들고 있기 때문이다. 줄 서는 질서 문화 따위는 없다. 심지어 그 문을 놓친다면, 전화 부스에 들이닥친 남자들이 수화기를 뺏어 당신의 아내에게 애정 표현을 할 지도 모른다.아내와의 즐거운 통화를 무사히 마쳤다면, 이제 문을 잡고 있던 손을 놓고 부스 밖으로 나가면 된다. 그러면 공중 전화를 쓰기 위해 달려드는 다른 남자들 중 제일 빠른 한 명이 부스에 들어가서 똑같이 문을 꼭 잡고 그의 아내와 통화할 수 있다.  thread: 각 남자들  mutex: 공중 전화 부스의 문  lock: 그 문을 잡고 있는 남자의 손  resource: 공중 전화CPython reference counting 을 하는 과정에서Rece condition이 일어나면 그 결과는 메모리 유실/object가 죽음이 발생이를 해결하기 위해 mutex사용 -&gt; object 하나하나 마다 대응하는 mutex가 필요함! 성능적으로 많은 손해, deadlock 위험상황CPython의 결정mutex를 통해 모든 reference 개수를 일일히 보호하지 말고 python interpreter자체를 잠구자!-&gt; 오직 한 thread만이 python 코드를 사용할 수 있음한 프로세스 안에서 여러 쓰레드를 이용한 병렬처리를 막음.한 쓰레드가 파이썬코드를 실행하기 위해선 공중전화 박스에 들어가 interpreter lock을 잡아야함!그래서 Global Interpreter Lock]]></content>
      <categories>
        
          <category> python </category>
        
      </categories>
      <tags>
        
          <tag> python gil </tag>
        
          <tag> gil </tag>
        
          <tag> global interpreter block </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
    <entry>
      <title><![CDATA[heroku를 사용해 django 프로젝트 배포하기]]></title>
      <url>/django/2018/10/24/Django-heroku-deploy/</url>
      <content type="text"><![CDATA[heroku로 django project 배포하기  PaaS 서비스 중 하나인 heroku를 통해 django project를 배포하는 법.git이 설치되어있다고 가정한다.  heroku 회원가입  헤로쿠 사용을 위한 패키지 다운virtualenv 활성화 상태에서 패키지 다운로드    pip install dj-database-url gunicorn whitenoise        requirements.txt 파일 생성    pip freeze &gt; requirements.txt        생성된 requirements.txt 맨 아래에 아래 내용 추가    psycopg2==2.7.1        Procfile 파일 생성헤로쿠에게 웹 사이트를 시작시키기 위해 실행되어야할 명령어의 순서를 알려주기 위해 procfile 파일 생성 (확장자 x, cmd에서 vi나 nano로 생성)    web: gunicorn &lt;mysite&gt;.wsgi --log-file -      웹 애플리케이션을 배포할 때 gunicorn &lt;mysite&gt;.wsgi 명령을 실행하는 것을 의미(gunicorn은 강력한 버전의 runserver 명령어)  runtime.txt 파일 생성헤로쿠에게 어떤 버전의 파이썬을 사용하는지 알려줌.    python-3.6.5 # 프로젝트 파이썬 버전        settings.py 설정로컬 컴퓨터 설정 파일 local_settigns.py생성# local_settings.pyimport osBASE_DIR = os.path.dirname(os.path.dirname(__file__))DATABASES = {    'default': {        'ENGINE': 'django.db.backends.sqlite3',        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),    }}DEBUG = True이 파일은 로컬에서 프로젝트를 돌릴 때 복붙을 하기 위함인 것 같다….헤로쿠 배포를 위한 settings.py 설정import dj_database_url...DEBUG = FalseALLOWED_HOSTS = ['127.0.0.1', '.herokuapp.com']...DATABASES = {    'default': {        'ENGINE': 'django.db.backends.postgresql_psycopg2',        'NAME': 'lowell',        'USER': 'name',        'PASSWORD': '',        'HOST': 'localhost',        'PORT': '',    }}...db_from_env = dj_database_url.config(conn_max_age=500)DATABASES['default'].update(db_from_env)  wsgi.py 설정프로젝트의 wsgi.py 파일의 끝에 다음 라인 추가from whitenoise.django import DjangoWhiteNoiseapplication = DjangoWhiteNoise(application)  .gitignore 파일 생성*.pycdb.sqlite3myvenv__pycache__local_settings.py # 로컬 환경을 위한 파일이기 때문에 등록  heroku 로그인 아까 만들었던 계정으로 로긘하깅$ heroku login  git 저장소 생성,커밋현재 장고 프로젝트 루트 디렉토리에 git 저장소를 생성부터 커밋$ git init$ git add . $ git status $ git commit -m "additional files and changes for Heroku"  애플리케이션 이름 설정$ heroku create &lt;appname&gt;이 이름은 도메인이 된다. &lt;appname&gt;.herokuapp.com  푸쉬!이제 배포하면 된다.git push heroku master  애플리케이션 접속헤로쿠에 웹 프로세스를 시작하라고 말한다.$ heroku ps:scale web=1앱에 들어가보장. 아래 명령어를 입력하면 브라우저가 뜰 것이당.$ heroku openmigrate , createsuperuser$ heroku run python manage.py migrate$ heroku run python manage.py createsuperuser  오류?오류가 생겼다면 다음 블로그를 참조해보자.http://ggilrong.tistory.com/entry/heroku%EC%97%90-django-%EC%95%B1%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0referhttps://tutorial-extensions.djangogirls.org/ko/heroku/http://ggilrong.tistory.com/entry/heroku%EC%97%90-django-%EC%95%B1%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0http://morningbird.tistory.com/23]]></content>
      <categories>
        
          <category> django </category>
        
      </categories>
      <tags>
        
          <tag> django </tag>
        
          <tag> django 배포 </tag>
        
          <tag> django heroku </tag>
        
          <tag> heroku </tag>
        
      </tags>
      <tags></tags>
    </entry>
  
</search>
