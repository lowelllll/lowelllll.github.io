<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-11-05T15:39:48+09:00</updated><id>http://localhost:4000/</id><title type="html">Lowell’s Blog</title><subtitle>lowell의 기술 블로그 </subtitle><author><name>Lowell</name></author><entry><title type="html">레드햇 페도라에서 Nginx 설치하기</title><link href="http://localhost:4000/nginx/2018/11/05/%EB%A0%88%EB%93%9C%ED%96%87-%ED%8E%98%EB%8F%84%EB%9D%BC%EC%97%90%EC%84%9C-Nginx-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="레드햇 페도라에서 Nginx 설치하기" /><published>2018-11-05T00:00:00+09:00</published><updated>2018-11-05T00:00:00+09:00</updated><id>http://localhost:4000/nginx/2018/11/05/%EB%A0%88%EB%93%9C%ED%96%87%20%ED%8E%98%EB%8F%84%EB%9D%BC%EC%97%90%EC%84%9C%20Nginx%20%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/nginx/2018/11/05/%EB%A0%88%EB%93%9C%ED%96%87-%ED%8E%98%EB%8F%84%EB%9D%BC%EC%97%90%EC%84%9C-Nginx-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/">&lt;p&gt;레드햇 페도라에서 Nginx 웹 서버를 설치한다. centos OS에서도 똑같이 설치할 수 있다.&lt;/p&gt;

&lt;p&gt;먼저 nginx를 받을 repository를 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ vi /etc/yum.repos.d/nginx.repo&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/[OS]/[OSRELEASE]/$basearch/
gpgcheck=0
enabled=1

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;여기서 대괄호로 감싸진 OS와 OSRELEASE를 자신의 OS와 버전에 따라 변경을 해줘야 한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nginx.org/packages/&quot;&gt;http://nginx.org/packages/&lt;/a&gt; 여기에 있는 자신의 OS와 OS 버전에 맞는 것이 있는지 확인 후 변경을 해준다. (없으면 패키지 설치가 안 되기 때문에 꼭 확인하고 변경해주자)&lt;/p&gt;

&lt;p&gt;설정 후 저장을 하고 Nginx를 설치한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ yum install nginx&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;nginx-명령어&quot;&gt;Nginx 명령어&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx 시작&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo service nginx start&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx 중지&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo service nginx stop&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx 재시작&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo service nginx restart&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx 상태&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo service nginx status&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx 설정 후 다시 로드&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo service nginx reload&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Nginx 설정이 성공 적인지 확인&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo nginx -t&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;refer&quot;&gt;refer&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.tjsrms.me/centos-7-nginx-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/&quot;&gt;CentOS 7 Nginx 설치하기&lt;/a&gt;&lt;/p&gt;</content><author><name>Lowell</name></author><category term="nginx 설치" /><category term="fedora nginx 설치" /><category term="레드햇 페도라 nginx 설치" /><summary type="html">레드햇 페도라에서 Nginx 웹 서버를 설치한다. centos OS에서도 똑같이 설치할 수 있다.</summary></entry><entry><title type="html">AWS(rhel fedora)Nginx-uWSGI-Django 연동하기</title><link href="http://localhost:4000/django/2018/11/05/Nginx-uWSGI-Django/" rel="alternate" type="text/html" title="AWS(rhel fedora)Nginx-uWSGI-Django 연동하기" /><published>2018-11-05T00:00:00+09:00</published><updated>2018-11-05T00:00:00+09:00</updated><id>http://localhost:4000/django/2018/11/05/Nginx-uWSGI-Django</id><content type="html" xml:base="http://localhost:4000/django/2018/11/05/Nginx-uWSGI-Django/">&lt;p&gt;이 포스팅에서는 AWS에서 서버를 셋팅할 것이기 때문에 AWS EC2 설정이 되어있다는 가정하에 진행한다.&lt;/p&gt;

&lt;p&gt;또한 글쓴이의 OS 환경은 레드햇 페도라 환경에서 진행했다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;먼저 간단하게 서버 구조를 말하면  Nginx 80번 포트로 접속하면 uWSGI 8000번 포트로 요청을 보내 우리가 만든 Django 프로젝트에 접속하게 될 것이다.&lt;/p&gt;

&lt;p&gt;우리가 사용자에게 listen할 포트(80)는 열어놔야하기 때문에 AWS 사용자 지정 포트에서 80번 포트를 열어줘야한다.&lt;/p&gt;

&lt;p&gt;포트를 변경하고 싶으면 변경해도 되지만 설정한 포트에따라 사용자 지정 포트를 열어줘야 하는 것도 명심하자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-9bc6cfcdb7b946a728ccfe26f4eb5c01_1200x500.jpg&quot; alt=&quot;nginx_wsgi_django&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;1-django&quot;&gt;1. Django&lt;/h3&gt;

&lt;p&gt;django 프로젝트는 배포될 준비가 다 되어있다는 가정 하에 진행한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;가상환경 셋팅&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;static root 설정&lt;/li&gt;
  &lt;li&gt;media root 설정&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ python manage.py collectstatic&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2nginx&quot;&gt;2.Nginx&lt;/h3&gt;

&lt;p&gt;글쓴이는 Nginx 설정에 정말 삽질을 했다.&lt;/p&gt;

&lt;p&gt;블로그를 보며 배포를 하려고 하는데 블로그에서는 sites-available 폴더에 conf 파일을 넣으면 된다고하는데.. 해당 폴더가없어서 삽질을 엄청했다.&lt;/p&gt;

&lt;p&gt;이 포스팅은 &lt;code class=&quot;highlighter-rouge&quot;&gt;sites-available&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sites-enabled&lt;/code&gt; 폴더가 없는 개발자들에게 유용한 포스트가 될 것이다.(그러길 바란다..)&lt;/p&gt;

&lt;p&gt;먼저 uWSGI와 nginx 서버 등을 설정하기 위해 conf 파일을 생성한다.&lt;/p&gt;

&lt;p&gt;etc/nginx/conf.d/testprj.conf 생성 (nginx의 경로는 OS 별로 다를 수  있기 때문에 꼭 확인해보자.)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;[..] 대괄호 안에있는 것은 자신의 프로젝트의 이름이나 경로에 따라 알맞게 변경한다.&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# etc/nginx/conf.d/testprj.conf 

server {
    listen                   80; # nginx가 listen할 포트
    server_name              [www.your.domain.com 123.23.56.5] #서버 도메인이나 아이피 입력
    client_max_body_size     10M;
    access_log               /var/log/testprj.access.log; # 성공 로그를 기록할 파일
    error_log                /var/log/testprj.error.log; # 에러 로그를 기록할 파일 

    # -------------
    # Handle Django
    # -------------

    location / {
    	# 외부에서 특정 포트로 Nginx를 통해 http 요청을 받았을 때 요청을 uWSGI를 통해 Django로 넘김
        proxy_pass       http://localhost:8000; # uWSGI가 nginx 요청을 받을 주소와 포트
        proxy_set_header Upgrade            $http_upgrade;
        proxy_set_header Connection         &quot;upgrade&quot;;
        proxy_set_header Host               $host;
        proxy_set_header X-Real-IP          $remote_addr;
        proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto  $scheme;
    }

    # ------------------
    # serve static files
    # ------------------


    # here we assume the STATIC_ROOT inside your django project is
    # set to /static/
    location /static/ {
    	# /static/ 으로 들어 올 때 경로 설정.
        alias   [/home/user/testprj/static/]; # django project settings.py에 설정되어있는 STATIC_ROOT 주소
    }
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;여기서&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo nginx -t
nginx: [emerg] could not build server_names_hash, you should increase server_names_hash_bucket_size: 64
nginx: configuration file /etc/nginx/nginx.conf test failed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;nginx 서버 확인 시 이런 오류가 난다면&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx.conf&lt;/code&gt; 파일 수정을 해줘야 한다.&lt;/p&gt;

&lt;p&gt;아래 설정을 &lt;code class=&quot;highlighter-rouge&quot;&gt;http {} block&lt;/code&gt;에 설정 안에 넣는다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# etc/nginx/nginx.conf

htttp{
    server_names_hash_bucket_size 512;
	server_names_hash_max_size 512;
	...
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;오류에는 64라고 되어있어 64로 했더니 오류가 사라지지 않아  512로하니까 되었다.&lt;/p&gt;

&lt;p&gt;이렇게 하고&lt;code class=&quot;highlighter-rouge&quot;&gt; $ sudo nginx -t &lt;/code&gt;수행 -&amp;gt; 성공하면 nginx 설정 끝!&lt;/p&gt;

&lt;h3 id=&quot;3-uwsgi&quot;&gt;3. uWSGI&lt;/h3&gt;

&lt;p&gt;가상환경이 활성화된 상태에서 uWSGI 설치&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ pip install uwsgi&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;잘 깔렸는지 확인해보자&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ wsgi --http :8000 --module [your-project-name].wsgi&lt;/code&gt; (manage.py 디렉토리에서)&lt;/p&gt;

&lt;p&gt;잘 되면 ini파일 생성&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo vi [testprj].ini&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# home/user/testprj/[testprj].ini

[uwsgi] # 이건 변경 Xß
module          =  [testprj].wsgi:application
master          =  true
pidfile         =  [testprj].uwsgi.pid
enable-threads  = true
http            =  127.0.0.1:8000 # uWSGI 포트 설정 
processes       =  5
harakiri        =  50
max-requests    =  5000
# clear environment on exit
vacuum          =  true
# optional path to a virtualenv
home            =  [/home/user/.pyenv/versions/3.6.5/envs/devenv] # 가상환경 경로 설정
# background the process
daemonize       =  [testprj].uwsgi.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이렇게 하구 저장!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;실행 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ uwsgi testprj.ini (가상환경 안에서 )&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;uWSGI 로그확인 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ vi testprj.uwsgi.log&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;uWSGI 중지 &lt;code class=&quot;highlighter-rouge&quot;&gt;$ uwsgi --stop [testprj].uwsgi.pid&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;uWSGI 가 실행된 상태에서 nginx 서버를 시작한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo service nginx start&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이후 맨 처음 nginx에서 생성한 conf 파일의 server_name에 설정한 주소(AWS 주소)로 들어가보면 Django project가 띄어져 있을 것이다! 그러면 연동 끝!&lt;/p&gt;

&lt;p&gt;설정 중 오류가 있으면 댓글 남겨주세요 💁‍&lt;/p&gt;

&lt;h2 id=&quot;refer&quot;&gt;refer&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@charlesthk/deploy-nginx-django-uwsgi-on-aws-ec2-amazon-linux-517a683163c6&quot;&gt;https://medium.com/@charlesthk/deploy-nginx-django-uwsgi-on-aws-ec2-amazon-linux-517a683163c6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.savour-it.com/posts/2018-02-06-nginx-uwsgi-django-setting/&quot;&gt;https://www.savour-it.com/posts/2018-02-06-nginx-uwsgi-django-setting/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04&quot;&gt;https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-14-04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.leop0ld.org/posts/use-python3-django-uwsgi-nginx/&quot;&gt;https://blog.leop0ld.org/posts/use-python3-django-uwsgi-nginx/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://charles.lescampeurs.org/2008/11/14/fix-nginx-increase-server_names_hash_bucket_size&quot;&gt;http://charles.lescampeurs.org/2008/11/14/fix-nginx-increase-server_names_hash_bucket_size&lt;/a&gt;&lt;/p&gt;</content><author><name>Lowell</name></author><category term="django" /><category term="nginx uwsgi django 연동" /><category term="nginx uwsgi django" /><category term="aws nginx django" /><category term="aws django 배포" /><summary type="html">이 포스팅에서는 AWS에서 서버를 셋팅할 것이기 때문에 AWS EC2 설정이 되어있다는 가정하에 진행한다.</summary></entry><entry><title type="html">Django-MySQL 연동하기</title><link href="http://localhost:4000/django/2018/11/05/Django-MySQL-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="Django-MySQL 연동하기" /><published>2018-11-05T00:00:00+09:00</published><updated>2018-11-05T00:00:00+09:00</updated><id>http://localhost:4000/django/2018/11/05/Django-MySQL-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/django/2018/11/05/Django-MySQL-%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0/">&lt;p&gt;이 포스팅은 mac과 linux 환경에서의 Django-MySQL 연동 글이다.&lt;/p&gt;

&lt;p&gt;윈도우 환경에서 작업을 진행한다면, &lt;a href=&quot;http://jamanbbo.tistory.com/28&quot;&gt;이 포스팅&lt;/a&gt; 과 함께 보기 추천한다. (별로 다른 건 없지만 윈도우 환경에서 오류 해결 법이 좀 더 추가되어있다)&lt;/p&gt;

&lt;p&gt;MySQL이 설치되어있다는 가정하에 진행하므로 꼭 설치 후 아래 항목들을 차례로 진행하길 바란다. (설치가 되어있지 않으면 오류가 난다)&lt;/p&gt;

&lt;h3 id=&quot;django와-mysql을-연동하기-위한-연동-드라이버를-설치&quot;&gt;Django와 MySQL을 연동하기 위한 연동 드라이버를 설치&lt;/h3&gt;

&lt;p&gt;django에서 제공하는 MySQL 연동 드라이버 모듈은 3가지가 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MySQLdb - 제일 안정된 드라이버, python3은 지원하지 않음&lt;/li&gt;
  &lt;li&gt;Mysqlclient - MySQLdb를 개선한 패키지, Python3.3 이상의 버전도 지원하고있음, &lt;strong&gt;장고에서 추천함&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;MySQL Connector/Python - MySQL 개발사 오라클에서 제공하는 드라이버&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;위 모듈 중 자신에게 맞는 드라이버를 설치하면 되는데 우리는 mysqlclient를 사용할 것이다.&lt;/p&gt;

&lt;p&gt;mysqlclient를 설치해준다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ pip sintall mysqlclient&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;centos/rhel fedora OS에서 설치시&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqlclient OSError: mysql_config not found&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이런 오류가 발생한다면 mysql-devel을 설치해주면 해결된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo yum install mysql-devel&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;django에서-mysql-연동-세팅&quot;&gt;Django에서 MySQL 연동 세팅&lt;/h3&gt;

&lt;p&gt;정상적으로 설치가 되었다면 django project의 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 파일에서 DATABASE 항목을 설정해준다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# settings.py&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'django.db.backends.mysql'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# mysql 엔진 설정&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mysite'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 데이터베이스 이름 &lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 데이터베이스 연결시 사용할 유저 이름&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 유저 패스워드&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'l27.0.0.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 데이터베이스 서버 주소&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PORT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'3306'&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 데이터베이스 서버 포트&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ENGINE&lt;/code&gt;을 제외한 항목은 자신의 mysql 설정에 맞게 수정해야한다.&lt;/p&gt;

&lt;p&gt;지금까지 설정이 올바르게 되었다면 Django와 MySQL이 연동이 되었을 것이다.&lt;/p&gt;

&lt;h3 id=&quot;mysql의-데이터테이블를-반영&quot;&gt;MySQL의 데이터(테이블)를 반영&lt;/h3&gt;

&lt;p&gt;만약 현재 MySQL의 데이터베이스에 저장되어있는 테이블들을 Django project에 반영하고 싶다면&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ python manage.py inspectdb &amp;gt; ./app/models.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;명령어를 사용하면 된다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-mysql&quot;&gt;mysql&amp;gt; desc board_tbl;
+---------+--------------+------+-----+---------+----------------+
| Field   | Type         | Null | Key | Default | Extra          |
+---------+--------------+------+-----+---------+----------------+
| idx     | int(6)       | NO   | PRI | NULL    | auto_increment |
| writer  | int(11)      | YES  |     | NULL    |                |
| subject | varchar(255) | YES  |     | NULL    |                |
| content | text         | YES  |     | NULL    |                |
| date    | datetime     | YES  |     | NULL    |                |
+---------+--------------+------+-----+---------+----------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MySQL 테이블이 model로 적용된 모습&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# app/models.py&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BoardTbl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DateTimeField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blank&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;managed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;db_table&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'board_tbl'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;django-migration을-mysql에-반영&quot;&gt;Django migration을 MySQL에 반영&lt;/h3&gt;

&lt;p&gt;Django의 migration을 MySQL에 반영하는 것은 sqllite3에 migration을 반영하는 것과 같다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; $ python manage.py migrate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;이 명령어를 실행하게 되면 MySQL 테이블에 auth_user 등 장고의 기본 테이블들이 생성된 것을 확인할 수  있을 것이다.&lt;/p&gt;

&lt;p&gt;이렇게 마지막까지 잘 되었다면 MySQL을 사용할 준비를 마친 것이다.&lt;/p&gt;

&lt;p&gt;이제 ORM, raw SQL 등을 기존 sqlite3 처럼 사용할 수 있다.&lt;/p&gt;</content><author><name>Lowell</name></author><category term="django mysql연동" /><category term="django mysql" /><summary type="html">이 포스팅은 mac과 linux 환경에서의 Django-MySQL 연동 글이다.</summary></entry><entry><title type="html">GIL을 알아보자</title><link href="http://localhost:4000/python/2018/10/24/GIL/" rel="alternate" type="text/html" title="GIL을 알아보자" /><published>2018-10-24T00:00:00+09:00</published><updated>2018-10-24T00:00:00+09:00</updated><id>http://localhost:4000/python/2018/10/24/GIL</id><content type="html" xml:base="http://localhost:4000/python/2018/10/24/GIL/">&lt;p&gt;Global Interpreter Lock&lt;/p&gt;

&lt;p&gt;한  CPU만 일함.!
다중 CPU 환경에서 동시에 여러 파이썬 코드를 병렬로 실행할 수 없음.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;인터프리터의 구현이 쉬워짐&lt;/li&gt;
  &lt;li&gt;Garbage Collector 만들기 조음&lt;/li&gt;
  &lt;li&gt;C/C++ 확장 만들기 만들기 쉬움.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;프로그램에 I/O 작업을 많이하면 파이썬 쓰레드도 좋음.&lt;/p&gt;

&lt;p&gt;우리가 하는 일반 프로그래밍은 I/O Bound&lt;/p&gt;

&lt;p&gt;계산을 많이 하는 작업
쓰레드 -&amp;gt; 프로세스&lt;/p&gt;

&lt;p&gt;다중 CPU에서 병렬 실행을 위해서는 다중 프로세스를 이용하는 multiprocessing 모듈을 사용함.
프로그램에 I/O 작업을 많이하면 파이썬 쓰레드도 좋음.&lt;/p&gt;

&lt;p&gt;우리가 하는 일반 프로그래밍은 I/O Bound&lt;/p&gt;

&lt;p&gt;계산을 많이 하는 작업
쓰레드 -&amp;gt; 프로세스&lt;/p&gt;

&lt;p&gt;다중 CPU에서 병렬 실행을 위해서는 다중 프로세스를 이용하는 multiprocessing 모듈을 사용함.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;th1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;pr1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_work&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pr1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pr1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;process&quot;&gt;Process&lt;/h3&gt;
&lt;p&gt;운영체제가 작업하는 단위&lt;/p&gt;

&lt;h3 id=&quot;thread&quot;&gt;Thread&lt;/h3&gt;
&lt;p&gt;이 Process 안에서 공유되는 메모리를 바탕으로여러 작업을 생성하는 작업 단위.
-&amp;gt; 각 thread마다 할단된 개인적인 메모리가 있으면서 thread가 속한 process가 가지는 메모리에도접근가능함.&lt;/p&gt;

&lt;h3 id=&quot;race-condition&quot;&gt;Race condition&lt;/h3&gt;
&lt;p&gt;여러 thread가 공유된 데이터를 변경함으로써 발생하는 문제.&lt;/p&gt;

&lt;p&gt;“Thread-safe 하다”
thread들이 race condition을 발생시키지 않으면서 각자의 일을 수행한다는 뜻.&lt;/p&gt;

&lt;h3 id=&quot;mutex&quot;&gt;Mutex&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Thread-safe한 코드를 만들기 위해서 사용하는 것 중 하나.&lt;/li&gt;
  &lt;li&gt;Race condition을 막기 위해 공유되는 메모리의 데이터를 여러 thread가 동시에 사용할 수 없도록 잠그는일을 맡음.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-linenos&quot; data-lang=&quot;linenos&quot;&gt;휴대폰이 없던 시절에는 공중 전화를 주로 이용했었다. 거리의 모든 남자들은 각자의 아내에게 전화를 너무나 걸고 싶어한다.
어떤 한 남자가 처음으로 공중 전화 부스에 들어가서 그의 사랑하는 아내에게 전화를 걸었다면, 그는 꼭 전화 부스의 문을 꼭 잡고 있어야 한다. 
왜냐하면 사랑에 눈이 먼 다른 남자들이 전화를 걸기 위해 시도때도 없이 달려들고 있기 때문이다. 줄 서는 질서 문화 따위는 없다. 
심지어 그 문을 놓친다면, 전화 부스에 들이닥친 남자들이 수화기를 뺏어 당신의 아내에게 애정 표현을 할 지도 모른다.
아내와의 즐거운 통화를 무사히 마쳤다면, 이제 문을 잡고 있던 손을 놓고 부스 밖으로 나가면 된다.
 그러면 공중 전화를 쓰기 위해 달려드는 다른 남자들 중 제일 빠른 한 명이 부스에 들어가서 똑같이 문을 꼭 잡고 그의 아내와 통화할 수 있다.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;thread: 각 남자들&lt;/li&gt;
  &lt;li&gt;mutex: 공중 전화 부스의 문&lt;/li&gt;
  &lt;li&gt;lock: 그 문을 잡고 있는 남자의 손&lt;/li&gt;
  &lt;li&gt;resource: 공중 전화&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CPython reference counting 을 하는 과정에서
Rece condition이 일어나면 그 결과는 메모리 유실/object가 죽음이 발생&lt;/p&gt;

&lt;p&gt;이를 해결하기 위해 mutex사용 
-&amp;gt; object 하나하나 마다 대응하는 mutex가 필요함! 성능적으로 많은 손해, deadlock 위험상황&lt;/p&gt;

&lt;p&gt;CPython의 결정
mutex를 통해 모든 reference 개수를 일일히 보호하지 말고 python interpreter자체를 잠구자!
-&amp;gt; 오직 한 thread만이 python 코드를 사용할 수 있음
한 프로세스 안에서 여러 쓰레드를 이용한 병렬처리를 막음.&lt;/p&gt;

&lt;p&gt;한 쓰레드가 파이썬코드를 실행하기 위해선 공중전화 박스에 들어가 interpreter lock을 잡아야함!&lt;br /&gt;
그래서 Global Interpreter Lock&lt;/p&gt;</content><author><name>Lowell</name></author><category term="python gil" /><category term="gil" /><category term="global interpreter block" /><summary type="html">Global Interpreter Lock</summary></entry><entry><title type="html">heroku를 사용해 django 프로젝트 배포하기</title><link href="http://localhost:4000/django/2018/10/24/Django-heroku-deploy/" rel="alternate" type="text/html" title="heroku를 사용해 django 프로젝트 배포하기" /><published>2018-10-24T00:00:00+09:00</published><updated>2018-10-24T00:00:00+09:00</updated><id>http://localhost:4000/django/2018/10/24/Django-heroku-deploy</id><content type="html" xml:base="http://localhost:4000/django/2018/10/24/Django-heroku-deploy/">&lt;p&gt;git이 설치되어있다고 가정한다.&lt;/p&gt;

&lt;h3 id=&quot;1-heroku-회원가입&quot;&gt;1. heroku 회원가입&lt;/h3&gt;

&lt;h3 id=&quot;2-헤로쿠-사용을-위한-패키지-다운&quot;&gt;2. 헤로쿠 사용을 위한 패키지 다운&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; 활성화 상태에서 패키지 다운로드&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install dj-database-url gunicorn whitenoise
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;3-requirementstxt-파일-생성&quot;&gt;3. &lt;code class=&quot;highlighter-rouge&quot;&gt;requirements.txt&lt;/code&gt; 파일 생성&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;생성된 requirements.txt 맨 아래에 아래 내용 추가&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ psycopg2==2.7.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;4-procfile-파일-생성&quot;&gt;4.&lt;code class=&quot;highlighter-rouge&quot;&gt; Procfile &lt;/code&gt;파일 생성&lt;/h3&gt;
&lt;p&gt;헤로쿠에게 웹 사이트를 시작시키기 위해 실행되어야할 명령어의 순서를 알려주기 위해 procfile 파일 생성 (확장자 x, cmd에서 vi나 nano로 생성)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;web: gunicorn &amp;lt;mysite&amp;gt;.wsgi --log-file -
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;웹 애플리케이션을 배포할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;gunicorn &amp;lt;mysite&amp;gt;.wsgi&lt;/code&gt; 명령을 실행하는 것을 의미&lt;br /&gt;
(gunicorn은 강력한 버전의 runserver 명령어)&lt;/p&gt;

&lt;h3 id=&quot;5-runtimetxt-파일-생성&quot;&gt;5. &lt;code class=&quot;highlighter-rouge&quot;&gt;runtime.txt&lt;/code&gt; 파일 생성&lt;/h3&gt;
&lt;p&gt;헤로쿠에게 어떤 버전의 파이썬을 사용하는지 알려줌.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# djangoproject/runtime.txt
python-3.6.5 # 프로젝트 파이썬 버전
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;5-settingspy-설정&quot;&gt;5. &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 설정&lt;/h3&gt;
&lt;p&gt;로컬 컴퓨터 설정 파일 &lt;code class=&quot;highlighter-rouge&quot;&gt;local_settigns.py&lt;/code&gt;생성&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# local_settings.py&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.db.backends.sqlite3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BASE_DIR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'db.sqlite3'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 파일은 로컬에서 프로젝트를 돌릴 때 사용을 하기 위함인 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;6-헤로쿠-배포를-위한-settingspy-설정&quot;&gt;6. 헤로쿠 배포를 위한 &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.py&lt;/code&gt; 설정&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# settings.py&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dj_database_url&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'127.0.0.1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.herokuapp.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'ENGINE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'django.db.backends.postgresql_psycopg2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'lowell'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'USER'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PASSWORD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'HOST'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;'PORT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;db_from_env&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dj_database_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn_max_age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DATABASES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'default'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_from_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;7-wsgipy-설정&quot;&gt;7. &lt;code class=&quot;highlighter-rouge&quot;&gt;wsgi.py&lt;/code&gt; 설정&lt;/h3&gt;
&lt;p&gt;프로젝트의 wsgi.py 파일의 끝에 다음 라인 추가&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# wsgi.py&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;whitenoise.django&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DjangoWhiteNoise&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DjangoWhiteNoise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;8-gitignore-파일-생성&quot;&gt;8. &lt;code class=&quot;highlighter-rouge&quot;&gt;gitignore&lt;/code&gt; 파일 생성&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*.pyc
db.sqlite3
myvenv
__pycache__
local_settings.py # 로컬 환경을 위한 파일이기 때문에 등록
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;9-heroku-로그인&quot;&gt;9. heroku 로그인&lt;/h3&gt;
&lt;p&gt;아까 만들었던 계정으로 로긘하깅&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;heroku login
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;10-git-저장소-생성커밋&quot;&gt;10. git 저장소 생성,커밋&lt;/h3&gt;
&lt;p&gt;현재 장고 프로젝트 루트 디렉토리에 git 저장소를 생성부터 커밋&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git init
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git add . 
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git status 

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;additional files and changes for Heroku&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;11-애플리케이션-이름-설정&quot;&gt;11. 애플리케이션 이름 설정&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;heroku create &amp;lt;appname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이 이름은 도메인이 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;appname&amp;gt;.herokuapp.com&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-이제-배포하면-된다&quot;&gt;12. 이제 배포하면 된다.&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;13-애플리케이션-접속&quot;&gt;13. 애플리케이션 접속&lt;/h3&gt;
&lt;p&gt;헤로쿠에 웹 프로세스를 시작하라고 말한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;heroku ps:scale &lt;span class=&quot;nv&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;앱에 들어가보장. 아래 명령어를 입력하면 브라우저가 뜰 것이당.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;heroku open
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;14-migrate--createsuperuser&quot;&gt;14. migrate , createsuperuser&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;heroku run python manage.py migrate

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;heroku run python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;오류-발생시&quot;&gt;오류 발생시&lt;/h3&gt;

&lt;p&gt;오류가 생겼다면 다음 블로그를 참조해보자.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ggilrong.tistory.com/entry/heroku%EC%97%90-django-%EC%95%B1%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0&quot;&gt;오류해결&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;refer&quot;&gt;refer&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://ggilrong.tistory.com/entry/heroku%EC%97%90-django-%EC%95%B1%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0&quot;&gt;https://tutorial-extensions.djangogirls.org/ko/heroku/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://ggilrong.tistory.com/entry/heroku%EC%97%90-django-%EC%95%B1%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0&quot;&gt;http://ggilrong.tistory.com/entry/heroku%EC%97%90-django-%EC%95%B1%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://morningbird.tistory.com/23&quot;&gt;http://morningbird.tistory.com/23&lt;/a&gt;&lt;/p&gt;</content><author><name>Lowell</name></author><category term="django" /><category term="django 배포" /><category term="django heroku" /><category term="heroku" /><summary type="html">git이 설치되어있다고 가정한다.</summary></entry><entry><title type="html">python3 venv 가상환경 사용하기</title><link href="http://localhost:4000/python/2018/08/23/python3-venv-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="python3 venv 가상환경 사용하기" /><published>2018-08-23T00:00:00+09:00</published><updated>2018-08-23T00:00:00+09:00</updated><id>http://localhost:4000/python/2018/08/23/python3-venv-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0</id><content type="html" xml:base="http://localhost:4000/python/2018/08/23/python3-venv-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/">&lt;p&gt;venv는 python3에서 기본으로 제공하는 가상환경(virtualenv)을 만들 수 있는 라이브러리이다.&lt;/p&gt;

&lt;p&gt;나는 이 라이브러리를 여태동안 모르고 있었다!&lt;/p&gt;

&lt;p&gt;원래 mac에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv&lt;/code&gt;를 사용하여 가상환경을 세팅했는데 윈도우는&lt;code class=&quot;highlighter-rouge&quot;&gt;pyenv&lt;/code&gt;를 사용할 수 없다.&lt;/p&gt;

&lt;p&gt;그래서 그동안 서드파티 라이브러리인 &lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt;를 사용하고 있었는데 venv로 갈아탈 예정이다.&lt;/p&gt;

&lt;p&gt;기본으로 제공하는데 사용해줘야지!&lt;/p&gt;

&lt;p&gt;만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; 라이브러리를 사용하고 싶다면 &lt;a href=&quot;http://jamanbbo.tistory.com/10&quot;&gt;해당 포스트&lt;/a&gt;에서 사용법을 확인하면 된다.&lt;/p&gt;

&lt;h2 id=&quot;venv-사용하기&quot;&gt;venv 사용하기&lt;/h2&gt;

&lt;p&gt;먼저 venv는 python3에 빌트인 되어있기 때문에 설치를 하지 않아도 사용가능하고 python2.7에서는 사용이 불가능하다.&lt;/p&gt;

&lt;p&gt;python2를 사용한다면 virtualenv/pyenv 라이브러리를 설치해야한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;가상환경 생성&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# window &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# python -m venv [venv 이름]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;python -m venv ./myenv
   
&lt;span class=&quot;c&quot;&gt;# mac&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# python3 -m venv [venv이름]&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python3 -m venv ./myenv
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;가상환경 활성화&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# window&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;myenv&lt;span class=&quot;se&quot;&gt;\S&lt;/span&gt;cripts&lt;span class=&quot;se&quot;&gt;\a&lt;/span&gt;ctivate
&lt;span class=&quot;c&quot;&gt;# mac&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source &lt;/span&gt;myenv&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\a&lt;/span&gt;ctivate 
&lt;span class=&quot;c&quot;&gt;# or &lt;/span&gt;
. myenv&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\a&lt;/span&gt;ctivate
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;가상환경에 성공적으로 들어간다면 prompt 앞에 현재 가상환경이 표시될 것이다.&lt;/p&gt;

    &lt;p&gt;지금부터는 격리된 환경에서 작업이 가능하다!&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(myenv) $ &amp;gt;&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;가상환경 비활성화&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Lowell</name></author><category term="python virtualenv" /><category term="python venv" /><category term="python pyenv" /><category term="window pyenv" /><category term="python 가상환경" /><summary type="html">venv는 python3에서 기본으로 제공하는 가상환경(virtualenv)을 만들 수 있는 라이브러리이다.</summary></entry></feed>